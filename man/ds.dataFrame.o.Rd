% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.dataFrame.o.R
\name{ds.dataFrame.o}
\alias{ds.dataFrame.o}
\title{ds.dataFrame.o calling dataFrameDS.o}
\usage{
ds.dataFrame.o(x = NULL, row.names = NULL, check.rows = FALSE,
  check.names = TRUE, stringsAsFactors = TRUE, completeCases = FALSE,
  DataSHIELD.checks = FALSE, newobj = "df_new", datasources = NULL)
}
\arguments{
\item{x}{This is a vector of character strings representing the names of the elemental
components to be combined. For example, the call:
ds.dataFrame.o(x=c('DF_input','matrix.m','var_age'),newobj='DF_output') will
combine a pre-existing data.frame called DF_input with a matrix and a variable
called var_age. The output will be the combined data.frame DF_output. As many
elemental components as needed may be combined in any order e.g. 3 data.frames,
7 variables and 2 matrices. For convenience the x argument can alternatively
be specified in a two step procedure, the first being a call to
the native R environment on the client server:
x.components<-c('DF_input1','matrix.m','DF_input2', 'var_age'); 
ds.dataFrame.o(x=x.components,newobj='DF_output')}

\item{row.names}{NULL or a single integer or character string specifying a
column to be used as row names, or a character or integer vector giving the
row names for the data frame.}

\item{check.rows}{if TRUE then the rows are checked for consistency of
length and names.}

\item{check.names}{logical. If TRUE then the names of the variables
in the data frame are checked to ensure that they are syntactically
valid variable names and are not duplicated.
If necessary they are adjusted (by make.names) so that they are.
As a slight modification to the standard data.frame() function in native
R, if any column names are duplicated, the second and subsequent
occurances are given the suffixes .1, .2 etc by ds.dataFrame.o and so
there are never any duplicates when check.names is invoked by the
serverside function dataFrameDS.o}

\item{stringsAsFactors}{logical: should character vectors be converted
to factors? The 'factory-fresh' default is TRUE.}

\item{completeCases}{logical. Default FALSE. If TRUE then any rows with
missing values
in any of the elemental components of the final output data.frame
will be deleted.}

\item{DataSHIELD.checks}{logical: If TRUE undertakes all DataSHIELD checks (time
consuming). Default FALSE.}

\item{newobj}{This a character string providing a name for the output
data.frame which defaults to 'df_new' if no name is specified.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. If the <datasources>
argument is not specified the default set of connections will be used: see \link{datashield.connections_default}.}
}
\value{
the object specified by the <newobj> argument (or default name <df_new>).
which is written to the serverside. In addition, two validity messages are returned
indicating whether <newobj> has been created in each data source and if so whether
it is in a valid form. If its form is not valid in at least one study - e.g. because
a disclosure trap was tripped and creation of the full output object was blocked -
ds.dataFrame.o() also returns any studysideMessages that can explain the error in creating
the full output object. As well as appearing on the screen at run time,if you wish to
see the relevant studysideMessages at a later date you can use the {ds.message.o}
function. If you type ds.message.o("newobj") it will print out the relevant
studysideMessage from any datasource in which there was an error in creating <newobj>
and a studysideMessage was saved. If there was no error and <newobj> was created
without problems no studysideMessage will have been saved and ds.message.o("newobj")
will return the message: "ALL OK: there are no studysideMessage(s) on this datasource".
}
\description{
Creates a data frame from its elemental components: pre-existing data frames;
single variables; matrices
}
\details{
A data frame is a list of variables all with the same number of rows with unique row
names, which is of class 'data.frame'. ds.dataFrame.o will create a data frame by combining
a series of elemental components which may be pre-existing data.frames, matrices or variables.
A critical requirement is that the length of all component variables, and the
number of rows of the component data.frames or matrices must all be the same. The output
data.frame will then have this same number of rows. ds.dataFrame.o calls the serverside
function dataFrameDS.o which is almost the same as the native R function data.frame()
and so several of the arguments are precisely the same as for data.frame()
}
\author{
DataSHIELD Development Team
}
